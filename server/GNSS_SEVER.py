import socket
import threading
import time
from flask import Flask, jsonify

# ????????????????????????????????
# ?숋툘 ?꾩뿭 蹂??
# ????????????????????????????????
esp_conn = None
esp_lock = threading.Lock()

# ????????????????????????????????
# ?뱻 Flask ?? ESP ?곌껐 ?곹깭 ?뺤씤
# ????????????????????????????????
status_app = Flask(__name__)

@status_app.route('/esp_status')
def esp_status():
    with esp_lock:
        connected = esp_conn is not None
    return jsonify({'esp_connected': connected})


# ????????????????????????????????
# ?뵆 ESP32 ?뚯폆 ?쒕쾭 (port 6000)
# ????????????????????????????????
def handle_esp32():
    global esp_conn
    srv = socket.socket()
    srv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    srv.bind(('0.0.0.0', 6000))
    srv.listen(1)
    print('[ESP32] ?곌껐 ?湲?以?(port 6000)...')

    while True:
        conn, addr = srv.accept()
        print('[ESP32] ?곌껐??', addr)
        with esp_lock:
            esp_conn = conn

        try:
            while True:
                data = conn.recv(1024)
                if not data:
                    print('[ESP32] ?곌껐 醫낅즺')
                    break
                print('[ESP32 ???쒕쾭]:', data.decode().strip())
        except Exception as e:
            print('[ESP32] ?ㅻ쪟:', e)
        finally:
            conn.close()
            with esp_lock:
                esp_conn = None
            print('[ESP32] ?ъ뿰寃??湲?以?..')


# ????????????????????????????????
# ?벑 ?깆씤踰ㅽ꽣 ?뚯폆 ?쒕쾭 (port 6001)
# ????????????????????????????????
def handle_app_client(conn):
    global esp_conn
    print('[APP] ?깆씤踰ㅽ꽣 ?곌껐??)

    try:
        while True:
            data = conn.recv(1024)
            if not data:
                print('[APP] ?곌껐 醫낅즺')
                break

            cmd = data.decode().strip()
            print(f'[APP ???쒕쾭] 紐낅졊 ?섏떊: {cmd}')

            with esp_lock:
                if esp_conn:
                    try:
                        esp_conn.sendall((cmd + '\n').encode())
                        print(f'[?쒕쾭 ??ESP32] ?꾨떖: {cmd}')
                        conn.send(b'OK: Sent to ESP\n')
                    except Exception as e:
                        print(f'[ESP32 ?꾩넚 ?ㅻ쪟]: {e}')
                        esp_conn = None
                        conn.send(b'ERROR: ESP send failed\n')
                else:
                    conn.send(b'ERROR: ESP not connected\n')
    except Exception as e:
        print('[APP] ?ㅻ쪟:', e)
    finally:
        conn.close()


def start_app_server():
    srv = socket.socket()
    srv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    srv.bind(('0.0.0.0', 6001))
    srv.listen(1)
    print('[APP] ?깆씤踰ㅽ꽣 ?곌껐 ?湲?以?(port 6001)...')
    while True:
        conn, _ = srv.accept()
        threading.Thread(target=handle_app_client, args=(conn,), daemon=True).start()


# ????????????????????????????????
# ?쭬 硫붿씤 ?ㅽ뻾
# ????????????????????????????????
if __name__ == '__main__':
    # ESP32 ?뚯폆 ?쒕쾭 ?ㅽ뻾
    threading.Thread(target=handle_esp32, daemon=True).start()

    # Flask ?곹깭 ?뺤씤 ?쒕쾭 ?ㅽ뻾 (port 6005)
    threading.Thread(target=lambda: status_app.run(host='0.0.0.0', port=6005), daemon=True).start()

    # ?깆씤踰ㅽ꽣 ?뚯폆 ?쒕쾭 ?ㅽ뻾
    start_app_server()


